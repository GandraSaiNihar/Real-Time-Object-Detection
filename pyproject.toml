[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "real-time-object-detection-tracking"
version = "1.0.0"
description = "Real-Time Object Detection & Tracking System with YOLOv8 and OpenCV"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
maintainers = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = [
    "computer-vision",
    "object-detection", 
    "object-tracking",
    "yolo",
    "yolov8",
    "opencv",
    "real-time",
    "surveillance",
    "bytetrack",
    "deep-learning",
    "pytorch"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "ultralytics>=8.0.196",
    "opencv-python>=4.8.1.78",
    "numpy>=1.24.3",
    "torch>=2.0.1",
    "torchvision>=0.15.2",
    "Pillow>=10.0.0",
    "matplotlib>=3.7.2",
    "seaborn>=0.12.2",
    "tqdm>=4.65.0",
    "PyYAML>=6.0.1",
    "scipy>=1.11.1",
    "scikit-learn>=1.3.0",
    "pandas>=2.0.3",
    "imutils>=0.5.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "flake8>=5.0.0",
    "black>=22.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
gpu = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
]

[project.scripts]
real-time-detection = "main:main"
rt-detection = "main:main"

[project.urls]
Homepage = "https://github.com/yourusername/real-time-object-detection-tracking"
Documentation = "https://github.com/yourusername/real-time-object-detection-tracking#readme"
Repository = "https://github.com/yourusername/real-time-object-detection-tracking"
"Bug Tracker" = "https://github.com/yourusername/real-time-object-detection-tracking/issues"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ultralytics.*",
    "cv2.*",
    "torch.*",
    "torchvision.*",
    "matplotlib.*",
    "seaborn.*",
    "scipy.*",
    "sklearn.*",
    "pandas.*",
    "imutils.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
